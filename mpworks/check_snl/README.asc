http://the-huck.com[Patrick Huck] (https://github.com/tschaume[tschaume]), Oct-18-2014 +
*Under Development*

:toc:
:toc-placement: manual

[options="compact"]
toc::[]

SNL & SNL Group Checks for next-gen MP-ID
-----------------------------------------

Report
~~~~~~

ICSD / SNL Parse Failures
^^^^^^^^^^^^^^^^^^^^^^^^^

In 2012, MP imported a set of structures that MIT parsed from the ICSD
database. The issue was that a subset of the MIT structures contained sites with zero
occupancy which were propagated into the MP SNL database. The zero-occupancy sites caused
the structures to be incorrectly flagged as not ordered and hence the according
calculations were actually never run. Within the scope of preparing
`snlgroup_id(_final)` as next-gen mp-id, these parser failures need to be fixed
and structures resubmitted if zero-occupancy sites indeed affect the duplicate
checking (structure matching) and/or the space group assignment. We verified
the latter by taking an example zero-occupancy structure from the SNL database,
removing all the zero-occupancy sites from a copy of the structure and
comparing the two against each other. This procedure caused the duplicate
finder to fail right away. As for the spacegroup checker, it initially was not
affected by the presence or removal of zero-occupancy sites at symmetry space
points but could easily be coaxed into failure by adding a zero-occupancy site
at an off-symmetry space point. This should not happen since the structures
stay identical under addition or removal of zero-occupancy sites. +
The MP's SNL database has been link:occu_sites_query.py[queried] for all
occurences of such zero-occupancy structures
link:results/zero_occu_sites.csv[resulting] in 127 affected SNLs out of 411670
in total. The 38 SNLs that are missing the `icsd_id` have the `is_valid` flag
set to `False` and/or contain too many sites (>200) to actually be calculated
anyway. Since there exists an updated ICSD database with zero-occupancy sites
removed and already propagated into the `icsd_crystals_mit` database, the above
SNL entries can be corrected by simply deprecating them and (re-)adding new
SNLs via the `icsd_to_snl` converter. The affected (and fixed) ordered
`snlgroup_ids` with <200 sites are then resubmitted for computation, including
the NaCoO2 compound that initiated the investigation. The new utility function
link:../snl_utils/utils.py[deprecate_snl()] deprecates an existing SNL by
adding 'DEPRECATED' to its `about.remarks` as well as to the SNLGroup's
`canonical_snl.about.remarks` if the SNL happens to be the canonical SNL of the
respective SNL group. For now, deprecated canonical SNLs have not been replaced
with another non-deprecated member of the SNL group if existent.

SNL Spacegroup Consistency Check
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The `builders.SNLSpaceGroupChecker` verifies whether the updated `SpacegroupAnalyzer`
(https://github.com/materialsproject/pymatgen/commit/f7fa5b[pymatgen@f7fa5b4])
still results in the same space group assignments as saved in the
`snl_mp_prod.snl` database. A full scan of the database containing *411948
SNLs* (timestamp: 2014-10-18 09:08:43,454) resulted in a total of *1416
affected SNLs*:
|==================================================
|
link:results/bad_snls.csv[results] +
link:logs/spacegroups.pbs.o10417417[resources] +
link:logs/spacegroups.pbs.e10417417[log] +
link:$$https://plot.ly/~tschaume/10$$[interactive] |
image:results/spacegroup_consistency.png["spacegroup consistency",link="https://plot.ly/~tschaume/10"]
|==================================================
The four main error categories displayed above are 'others', 'pybtex', 'SG
default' and 'SG change' with *0, 0, 1104 and 312 affected SNLs*, respectively.
Search/grep the link:results/bad_snls.csv[results] file for these category
names to get a reduced list of affected SNLs with additional info.  The 'SG
default' is separated as it only denotes an alternative default value chosen
for "spacegroup not found". If the underlying `spglib` doesn't find a
spacegroup it
https://github.com/atztogo/spglib/blob/f861f3/src/spacegroup.c#L147[returns 0].
However, this is
https://github.com/materialsproject/MPWorks/blob/e61a4f/mpworks/snl_utils/snl_mongo.py#L95-L96[mapped
to -1] in `mpworks.snl_utils.snl_mongo` and saved as part of the
`snlgroup_key`. Hence,
https://github.com/materialsproject/MPWorks/blob/c21077/mpworks/check_snl/builders.py#L126-L127[comparing]
`SpacegroupAnalyzer.get_spacegroup_number()` with `MPStructureNL.sg_num` will
result in mismatching spacegroup numbers.  More importantly, the 'SG change'
category indicates real changes of the assigned space group using the latest
`SpacegroupAnalyzer`. These errors need to be retroactively fixed by (i)
deprecating the old SNL (see preceding section), (ii) re-adding those SNLs with
new code, and (iii) updating MPSNL, `snlgroup_id` and `snlgroup_id_final` in
downstream collections (work in progress). For completeness, also a quick note
on the 'pybtex' error category. With the latest version of pybtex (0.18) the
strict mode has been made default.  This means that all former warnings were
causing error exceptions to be raised for a significant number of SNLs since
the pybtex version has been fixed in
https://github.com/materialsproject/pymatgen/commit/a69eaa[pymatgen@a69eaa].
Hence, the conversion from database dicts to pymatgen objects via
`MPStructureNL.from_dict(snl_dict)`, for instance, wasn't resulting in a usable
`Structure` object anymore.
https://github.com/materialsproject/pymatgen/commit/e6229f[pymatgen@e6229f]
added a call to `pybtex.errors.set_strict_mode(False)` in
`matproj.snl.is_valid_bibtex()` to keep treating pybtex typos as warnings
(backward-compatibility).
|=========================================================
|
The (https://plot.ly/~tschaume/11[interactive]) plot on the right summarizes +
the results of this consistency check comparing the new vs. the old spacegroups +
for the 'SG change' category. Clearly, the bulk of the SNLs was assigned a less +
symmetric spacegroup with the new `SpacegroupAnalyzer`. |
image:results/spacegroup_changes.png["Spacegroup Changes",link="https://plot.ly/~tschaume/11"]
|=========================================================

SNL Group Cross Checks
^^^^^^^^^^^^^^^^^^^^^^

The `SNLGroupCrossChecker` aggregated *34949 different compositions* with more
than one SNLGroup as builder items. Out of *178179 SNLGroups in total*
(timestamp: 2014-10-18 22:09:21,068), *62663 were processed* using the
`SNLGroupCrossChecker` in a full scan of the `snl_mp_prod.snlgroups` database.
For a cross check of all SNLGroups, we compare for each builder item the
canonical structures of all SNLGroups with identical composition (i.e. same
`reduced_cell_formula_abc`) against each other via the 'fit' method of
`pymatgen.analysis.structure_matcher`:
[source,python]
----------------------------------------------
self._matcher = StructureMatcher(
    ltol=0.2, stol=0.3, angle_tol=5, primitive_cell=True, scale=True,
    attempt_supercell=False, comparator=ElementComparator()
    )
----------------------------------------------
A combination of canonical structures can either have different or same space
groups (SGs) recorded in the `snlgroup_key` with the latter currently
determining classification in SNLGroups. If there are no "bad" SNLGroups, none
of the combinations should yield a match via the above `StructureMatcher`.
However, for the full link:results/bad_snlgroups_2.csv[scan] over about 178k
SNLGroups, a total of *10015 SNLGroups actually match* using the
`StructureMatcher`. 6327 SNLGroups of them have different SGs ('diff. SGs'
category), and 3688 have the same SGs ('same SGs' category) assigned with
no other error categories triggered:
|==================================================
|link:results/bad_snlgroups_2_in_matdb.csv[results:`in_matdb`] +
link:results/bad_snlgroups_2_notin_matdb.csv[results:`notin_matdb`] +
link:logs/canonicals.pbs.o10425471[resources] +
link:logs/canonicals.pbs.e10425471[log] +
link:$$https://plot.ly/~tschaume/12$$[interactive]|
image:results/canonicals_crosscheck.png["canonicals crosscheck",link="https://plot.ly/~tschaume/12"]
|==================================================
SNLGroup combinations for which both `snlgroup_id(s)` were found as
`snlgroup_id(s)_final` in the `mg_core_prod` database (1941 combinations), are
separated out as `in_matdb` results files above.  Keeping the current
definition of a SNLGroup, all SNLGroups of the 'same SGs' category would need
to be merged since the previous version of the `StructureMatcher` incorrectly
assigned them to separate SNLGroups. As an example, the following list shows
the number of SNLGroups and also in paranthesis the according number of 'diff.
SGs' vs. 'same SGs' matches for the 10 most abundant compositions.

Co5 Li9 Mn2 O16: 1090 (0,3) +
Co3 Li7 Mn2 O12: 390 (9,0) +
O2 Si1: 338 (63,10) +
Co2 Li4 Mn1 O7: 297 (0,0) +
Co3 Li7 Mn8 O24: 231 (0,0) +
Co7 Li9 O16: 221 (200,1) +
Li9 Mn7 O16: 221 (200,1) +
Co1 Li7 Mn4 O12: 212 (53,0) +
S1 Zn1: 197 (101,198) +
Cd1 I2: 155 (161,202)

TODO: insert sg1_vs_sg2 plot

In addition to composition, `snlgroup_id`, `sg_num` and `task_id`, each of the
combinations of "bad" SNLGroups with different SGs, the
link:results/bad_snlgroups_2.csv[results] file also contains the following
'deltas':

- `delta_energy`, i.e. difference in `final_energy_per_atom`
- `delta_bandgap`, i.e.  difference in `band_gap.search_gap.band_gap`
- `delta_volume_per_atom`, i.e. difference in volume over nsites, and
- `rms_dist`, i.e.  return tuple of `matcher.get_rms_dist()`.

For the matching SNLGroups with different SGs, 'different' canonical structures
are separated from 'similar' ones (cf.  'scenario' column) via
[source,python]
-------------------------------------------------------
'different' if (delta_energy > 0.01 or delta_bandgap > 0.1) else 'similar'
-------------------------------------------------------
which results in 242 'different' vs. 328 'similar' canonical structures. Two
examples from both sides of the spectrum for each scenario are compared in the
following table.

[options="header"]
|=============================================
| | most different | least different | least similar | most similar
| *composition* | I1 Li1 O3 | Ba1 S3 V1 | Ba1 Fe1 O10 Si4 | Si2 Sr1
| *mp-id's* |
https://materialsproject.org/materials/mp-545343[mp-545343] +
https://materialsproject.org/materials/mp-22955[mp-22955] |
https://materialsproject.org/materials/mp-555857[mp-555857] +
https://materialsproject.org/materials/mp-4227[mp-4227] |
https://materialsproject.org/materials/mp-504885[mp-504885] +
https://materialsproject.org/materials/mp-603263[mp-603263] |
https://materialsproject.org/materials/mp-14172[mp-14172] +
https://materialsproject.org/materials/mp-496[mp-496]
| *delta_bandgap* | 3.65 | 0.0 | 0.0981 | 0.0
| *delta_energy* | 0.239 | 0.0104 | 9.08e-03 | 4.08e-3
| *delta_vol/atom* | 2.64 | 0.129 | 0.115 | 0.00155
|=============================================

Analysis Overview
~~~~~~~~~~~~~~~~~

Monitoring and Analysis via https://plot.ly[Plotly's] REST/Streaming API using
`matgendb.builders` for parallel processing: see
link:check_snl.py[check_snl.py] or link:builders.py[builders.py]

|===========================================================
| *Results:* +
link:results/bad_snls.csv[bad SNLs] from 'spacegroups' check +
link:results/bad_snlgroups.csv[bad SNL Groups] from 'groupmembers' check +
link:results/bad_snlgroups_2.csv[bad SNL Groups] from 'canonicals' check +
link:results/zero_occu_sites.csv[SNLs w/ zero-occupancy sites] .2+| *Video:* (click to view) +
image:http://share.gifyoutube.com/YO8W8G.gif["SNLs & SNL Groups Check",link="http://youtu.be/QjQXpgxSx7o"]
| *History:* +
'2014-09-25': http://youtu.be/QFPX5pvruMA[video], link:$$https://plot.ly/~tschaume/3$$[interactive plot] +
'2014-09-27': http://youtu.be/QjQXpgxSx7o[video], link:$$https://plot.ly/~tschaume/6$$[interactive plot] +
'2014-10-07': link:$$https://plot.ly/~tschaume/8$$[interactive plot]
'2014-10-18': link:$$https://plot.ly/~tschaume/10$$[interactive plot]
|===========================================================

// vim: set syntax=asciidoc:
